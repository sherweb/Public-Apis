// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.Distributor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A product is constituted of one or multiple charges.
    /// </summary>
    public partial class Charge
    {
        /// <summary>
        /// Initializes a new instance of the Charge class.
        /// </summary>
        public Charge()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Charge class.
        /// </summary>
        /// <param name="chargeType">Possible values include: 'Setup',
        /// 'Recurring', 'Usage'</param>
        /// <param name="listPrice">Price before deduction(s).</param>
        /// <param name="netPrice">ListPrice - deduction(s) - fee(s).</param>
        /// <param name="subTotal">Quantity * netPriceProrated.</param>
        /// <param name="isBilled">Indicates whether or not a charge has been
        /// billed.</param>
        /// <param name="isProratable">Indicates whether or not the price of a
        /// charge is proratable.</param>
        public Charge(System.Guid? productId = default(System.Guid?), string productName = default(string), string sku = default(string), System.Guid? chargeId = default(System.Guid?), string chargeName = default(string), string chargeType = default(string), System.DateTime? periodFrom = default(System.DateTime?), System.DateTime? periodTo = default(System.DateTime?), double? quantity = default(double?), double? listPrice = default(double?), double? netPrice = default(double?), double? netPriceProrated = default(double?), double? subTotal = default(double?), string currency = default(string), bool? isBilled = default(bool?), bool? isProratable = default(bool?), IList<Deduction> deductions = default(IList<Deduction>), IList<Fee> fees = default(IList<Fee>), Invoice invoice = default(Invoice), IList<Tax> taxes = default(IList<Tax>), IList<Tag> tags = default(IList<Tag>))
        {
            ProductId = productId;
            ProductName = productName;
            Sku = sku;
            ChargeId = chargeId;
            ChargeName = chargeName;
            ChargeType = chargeType;
            PeriodFrom = periodFrom;
            PeriodTo = periodTo;
            Quantity = quantity;
            ListPrice = listPrice;
            NetPrice = netPrice;
            NetPriceProrated = netPriceProrated;
            SubTotal = subTotal;
            Currency = currency;
            IsBilled = isBilled;
            IsProratable = isProratable;
            Deductions = deductions;
            Fees = fees;
            Invoice = invoice;
            Taxes = taxes;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productId")]
        public System.Guid? ProductId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chargeId")]
        public System.Guid? ChargeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chargeName")]
        public string ChargeName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Setup', 'Recurring', 'Usage'
        /// </summary>
        [JsonProperty(PropertyName = "chargeType")]
        public string ChargeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodFrom")]
        public System.DateTime? PeriodFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodTo")]
        public System.DateTime? PeriodTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or sets price before deduction(s).
        /// </summary>
        [JsonProperty(PropertyName = "listPrice")]
        public double? ListPrice { get; set; }

        /// <summary>
        /// Gets or sets listPrice - deduction(s) - fee(s).
        /// </summary>
        [JsonProperty(PropertyName = "netPrice")]
        public double? NetPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "netPriceProrated")]
        public double? NetPriceProrated { get; set; }

        /// <summary>
        /// Gets or sets quantity * netPriceProrated.
        /// </summary>
        [JsonProperty(PropertyName = "subTotal")]
        public double? SubTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or sets indicates whether or not a charge has been billed.
        /// </summary>
        [JsonProperty(PropertyName = "isBilled")]
        public bool? IsBilled { get; set; }

        /// <summary>
        /// Gets or sets indicates whether or not the price of a charge is
        /// proratable.
        /// </summary>
        [JsonProperty(PropertyName = "isProratable")]
        public bool? IsProratable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deductions")]
        public IList<Deduction> Deductions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fees")]
        public IList<Fee> Fees { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invoice")]
        public Invoice Invoice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxes")]
        public IList<Tax> Taxes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<Tag> Tags { get; set; }

    }
}
